package com.miniproject.guitar.solution2;

import java.util.*;

public class FindGuitarTester {
	private static final Scanner sc = new Scanner(System.in);
	private static final Inventory inventory = new Inventory();

	public static void main(String[] args) {
		initializeInventory();

		while (true) {
			System.out.println("\nWhat would you like to do?");
			System.out.println("1. Search Guitar");
			System.out.println("2. Add Guitar to Inventory");
			System.out.println("3. Show All Guitars");
			System.out.println("4. Exit");
			System.out.print("Enter your choice: ");
			String choice = sc.nextLine().trim();

			switch (choice) {
			case "1":
				searchGuitar();
				break;
			case "2":
				addGuitar();
				break;
			case "3":
				showAllGuitars();
				break;
			case "4":
				System.out.println("Thank you for using Guitar Finder!");
				return;
			default:
				System.out.println("Invalid option. Please enter 1–4.");
			}
		}
	}

	private static void searchGuitar() {
		String model;
		while (true) {
			System.out.println("Enter the model you are looking for or type 'skip':");
			model = sc.nextLine().trim();
			if (model.isEmpty()) {
				System.out.println("Please enter a model or type 'skip'.");
			} else {
				break;
			}
		}
		model = model.equalsIgnoreCase("skip") ? null : model;

		Builder builder = selectBuilder(true);
		Type type = selectType(true);
		Wood backWood = selectWood("Back", false);
		Wood topWood = selectWood("Top", false);

		GuitarSpec searchSpec = new GuitarSpec(builder, model, type, backWood, topWood);
		List<Guitar> matches = inventory.search(searchSpec);

		if (matches.isEmpty()) {
			System.out.println("Sorry, we have nothing matching your preference.");
		} else {
			for (Guitar guitar : matches) {
				GuitarSpec spec = guitar.getSpec();
				System.out.println("\nYou might like this " + spec.getBuilder() + " " + spec.getModel() + " "
						+ spec.getType() + " guitar:\n   " + spec.getBackWood() + " back and sides,\n   "
						+ spec.getTopWood() + " top.\n   Price: $" + guitar.getPrice());
			}
		}
	}

	private static void addGuitar() {
		System.out.println("\nAdding a new guitar to the inventory...");

		String serialNumber;
		while (true) {
			System.out.print("Enter Serial Number: ");
			serialNumber = sc.nextLine().trim();
			if (!serialNumber.isEmpty())
				break;
			System.out.println("Serial number cannot be empty.");
		}

		double price = 0;
		while (true) {
			System.out.print("Enter Price: ");
			try {
				price = Double.parseDouble(sc.nextLine().trim());
				if (price > 0)
					break;
				System.out.println("Price must be greater than 0.");
			} catch (NumberFormatException e) {
				System.out.println("Invalid input! Please enter a valid price.");
			}
		}

		String model;
		while (true) {
			System.out.print("Enter Model: ");
			model = sc.nextLine().trim();
			if (!model.isEmpty())
				break;
			System.out.println("Model cannot be empty.");
		}

		Builder builder = selectBuilder(false);
		Type type = selectType(false);
		Wood backWood = selectWood("Back", false);
		Wood topWood = selectWood("Top", false);

		inventory.addGuitar(serialNumber, price, new GuitarSpec(builder, model, type, backWood, topWood));
		System.out.println("Guitar added successfully to the inventory!");
	}

	private static void showAllGuitars() {
		List<Guitar> guitars = inventory.getAllGuitars();
		if (guitars.isEmpty()) {
			System.out.println("No guitars in inventory.");
			return;
		}

		System.out.println("\n------------------------------------------------------------------------------");
		System.out.printf("| %-8s | %-10s | %-8s | %-8s | %-10s | %-10s | %-7s |\n", 
			"Serial", "Model", "Builder", "Type", "Back Wood", "Top Wood", "Price");
		System.out.println("---------------------------------------------------------------");

		for (Guitar guitar : guitars) {
			GuitarSpec spec = guitar.getSpec();
			System.out.printf("| %-8s | %-10s | %-8s | %-8s | %-10s | %-10s | $%-6.2f |\n",
				guitar.getSerialNumber(),
				spec.getModel(),
				spec.getBuilder(),
				spec.getType(),
				spec.getBackWood(),
				spec.getTopWood(),
				guitar.getPrice());
		}
		System.out.println("---------------------------------------------------------------");
	}


	private static Builder selectBuilder(boolean allowSkip) {
		while (true) {
			System.out.println("Select Builder:");
			System.out.println(
					"1. FENDER\n2. GIBSON\n3. MARTIN\n4. COLLINGS\n5. TAYLOR" + (allowSkip ? "\n6. Skip" : ""));
			String input = sc.nextLine().trim();
			switch (input) {
			case "1":
				return Builder.FENDER;
			case "2":
				return Builder.GIBSON;
			case "3":
				return Builder.MARTIN;
			case "4":
				return Builder.COLLINGS;
			case "5":
				return Builder.TAYLOR;
			case "6":
				if (allowSkip)
					return null;
			default:
				System.out.println("Invalid input! Please enter a number" + (allowSkip ? " (1–6)." : " (1–5)."));
			}
		}
	}

	private static Type selectType(boolean allowSkip) {
		while (true) {
			System.out.println("Select Type:");
			System.out.println("1. ACOUSTIC\n2. ELECTRIC" + (allowSkip ? "\n3. Skip" : ""));
			String input = sc.nextLine().trim();
			switch (input) {
			case "1":
				return Type.ACOUSTIC;
			case "2":
				return Type.ELECTRIC;
			case "3":
				if (allowSkip)
					return null;
			default:
				System.out.println("Invalid input! Please enter a number" + (allowSkip ? " (1–3)." : " (1–2)."));
			}
		}
	}

	private static Wood selectWood(String label, boolean allowSkip) {
		while (true) {
			System.out.println("Select " + label + " Wood:");
			System.out.println("1. MAHOGANY\n2. MAPLE\n3. ALDER\n4. ROSEWOOD\n5. CEDAR");
			String input = sc.nextLine().trim();
			switch (input) {
			case "1":
				return Wood.MAHOGANY;
			case "2":
				return Wood.MAPLE;
			case "3":
				return Wood.ALDER;
			case "4":
				return Wood.ROSEWOOD;
			case "5":
				return Wood.CEDAR;
			default:
				System.out.println("Invalid input! Please enter number between 1 and 5.");
			}
		}
	}

	private static void initializeInventory() {
		inventory.addGuitar("G001", 1500,
				new GuitarSpec(Builder.FENDER, "Stratocastor", Type.ELECTRIC, Wood.ALDER, Wood.ALDER));
		inventory.addGuitar("G002", 1800,
				new GuitarSpec(Builder.GIBSON, "Les Paul", Type.ELECTRIC, Wood.MAPLE, Wood.MAHOGANY));
		inventory.addGuitar("G003", 1100,
				new GuitarSpec(Builder.MARTIN, "D-28", Type.ACOUSTIC, Wood.ROSEWOOD, Wood.CEDAR));
		inventory.addGuitar("G004", 1300,
				new GuitarSpec(Builder.COLLINGS, "OM2H", Type.ACOUSTIC, Wood.ROSEWOOD, Wood.ROSEWOOD));
		inventory.addGuitar("G005", 1600,
				new GuitarSpec(Builder.TAYLOR, "314ce", Type.ACOUSTIC, Wood.MAPLE, Wood.MAPLE));
	}
}
