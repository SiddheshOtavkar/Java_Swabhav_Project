package com.miniproject.guitar.solution2;

import java.util.List;
import java.util.Scanner;

public class FindGuitarTester {

	public static void main(String[] args) {
		Inventory inventory = new Inventory();
		initializeInventory(inventory);

		Scanner sc = new Scanner(System.in);

		System.out.println("Select Model: 1. Stratocastor 2. Les Paul 3. D-28 4. SG Standard 5. Telecaster");
		String model = "";
		switch (sc.nextInt()) {
			case 1:
				model = "Stratocastor";
				break;
			case 2:
				model = "Les Paul";
				break;
			case 3:
				model = "D-28";
				break;
			case 4:
				model = "SG Standard";
				break;
			case 5:
				model = "Telecaster";
				break;
			default:
				System.out.println("Invalid model selection.");
				sc.close();
				return;
		}
		sc.nextLine(); // consume newline

		System.out.println("Select Builder: 1. FENDER 2. GIBSON 3. MARTIN 4. COLLINGS 5. TAYLOR");
		Builder builder = null;
		switch (sc.nextInt()) {
			case 1:
				builder = Builder.FENDER;
				break;
			case 2:
				builder = Builder.GIBSON;
				break;
			case 3:
				builder = Builder.MARTIN;
				break;
			case 4:
				builder = Builder.COLLINGS;
				break;
			case 5:
				builder = Builder.TAYLOR;
				break;
			default:
				System.out.println("Invalid builder selection.");
				sc.close();
				return;
		}

		System.out.println("Select Type: 1. ACOUSTIC  2. ELECTRIC");
		Type type = null;
		switch (sc.nextInt()) {
			case 1:
				type = Type.ACOUSTIC;
				break;
			case 2:
				type = Type.ELECTRIC;
				break;
			default:
				System.out.println("Invalid type selection.");
				sc.close();
				return;
		}

		System.out.println("Select Back Wood: 1. MAHOGANY 2. MAPLE 3. ALDER 4. ROSEWOOD 5. CEDAR");
		Wood backWood = null;
		switch (sc.nextInt()) {
			case 1:
				backWood = Wood.MAHOGANY;
				break;
			case 2:
				backWood = Wood.MAPLE;
				break;
			case 3:
				backWood = Wood.ALDER;
				break;
			case 4:
				backWood = Wood.ROSEWOOD;
				break;
			case 5:
				backWood = Wood.CEDAR;
				break;
			default:
				System.out.println("Invalid back wood selection.");
				sc.close();
				return;
		}

		System.out.println("Select Top Wood: 1. MAHOGANY 2. MAPLE 3. ALDER 4. ROSEWOOD 5. CEDAR");
		Wood topWood = null;
		switch (sc.nextInt()) {
			case 1:
				topWood = Wood.MAHOGANY;
				break;
			case 2:
				topWood = Wood.MAPLE;
				break;
			case 3:
				topWood = Wood.ALDER;
				break;
			case 4:
				topWood = Wood.ROSEWOOD;
				break;
			case 5:
				topWood = Wood.CEDAR;
				break;
			default:
				System.out.println("Invalid top wood selection.");
				sc.close();
				return;
		}

		GuitarSpec userSpec = new GuitarSpec(builder, model, type, backWood, topWood);
		List<Guitar> matches = inventory.search(userSpec);

		if (matches.isEmpty()) {
			System.out.println("Sorry, we have nothing matching your preference.");
		} else {
			for (Guitar guitar : matches) {
				GuitarSpec spec = guitar.getSpec();
				System.out.println("You might like this " + spec.getBuilder() + " " + spec.getModel() + " "
						+ spec.getType() + " guitar:\n   " + spec.getBackWood() + " back and sides,\n   "
						+ spec.getTopWood() + " top.\nYou can have it for only $" + guitar.getPrice() + "!\n");
			}
		}

		sc.close();
	}

	private static void initializeInventory(Inventory inventory) {
		inventory.addGuitar("V001", 1500,
				new GuitarSpec(Builder.FENDER, "Stratocastor", Type.ELECTRIC, Wood.ALDER, Wood.ALDER));
		inventory.addGuitar("V002", 1200,
				new GuitarSpec(Builder.GIBSON, "Les Paul", Type.ELECTRIC, Wood.MAPLE, Wood.MAHOGANY));
		inventory.addGuitar("V003", 1300,
				new GuitarSpec(Builder.MARTIN, "D-28", Type.ACOUSTIC, Wood.ROSEWOOD, Wood.CEDAR));
		inventory.addGuitar("V004", 1000,
				new GuitarSpec(Builder.GIBSON, "SG Standard", Type.ELECTRIC, Wood.MAPLE, Wood.MAHOGANY));
		inventory.addGuitar("V005", 1100,
				new GuitarSpec(Builder.FENDER, "Telecaster", Type.ELECTRIC, Wood.ALDER, Wood.MAPLE));
	}
}
