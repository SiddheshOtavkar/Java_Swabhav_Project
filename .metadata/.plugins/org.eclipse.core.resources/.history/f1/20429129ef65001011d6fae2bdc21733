/*
 * Select Model: 1. Stratocastor 2. Les Paul 3. D-28 4. SG Standard 5.
 * Telecaster
 */
package com.miniproject.guitar.solution2;

import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

public class FindGuitarTester {

	public static void main(String[] args) {
		Inventory inventory = new Inventory();
		initializeInventory(inventory);

		Scanner sc = new Scanner(System.in);

		try {
			System.out.println("Enter the model you are looking for: ");
			String model = sc.nextLine();

			Builder builder = selectBuilder(sc);
			if (builder == null) return;

			Type type = selectType(sc);
			if (type == null) return;

			Wood backWood = selectWood(sc, "Back");
			if (backWood == null) return;

			Wood topWood = selectWood(sc, "Top");
			if (topWood == null) return;

			GuitarSpec userSpec = new GuitarSpec(builder, model, type, backWood, topWood);
			List<Guitar> matches = inventory.search(userSpec);

			if (matches.isEmpty()) {
				System.out.println("Sorry, we have nothing matching your preference.");
			} else {
				for (Guitar guitar : matches) {
					GuitarSpec spec = guitar.getSpec();
					System.out.println("You might like this " + spec.getBuilder() + " " + spec.getModel() + " "
							+ spec.getType() + " guitar:\n   " + spec.getBackWood() + " back and sides,\n   "
							+ spec.getTopWood() + " top.\nYou can have it for only $" + guitar.getPrice() + "!\n");
				}
			}
		} catch (InputMismatchException e) {
			System.out.println("Invalid input! Please enter numeric values for selection.");
		} catch (Exception e) {
			System.out.println("Something went wrong: " + e.getMessage());
		} finally {
			sc.close();
		}
	}

	private static Builder selectBuilder(Scanner sc) {
		System.out.println("Select Builder:");
		System.out.println("1. FENDER");
		System.out.println("2. GIBSON");
		System.out.println("3. MARTIN");
		System.out.println("4. COLLINGS");
		System.out.println("5. TAYLOR");

		int choice = sc.nextInt();
		switch (choice) {
			case 1: return Builder.FENDER;
			case 2: return Builder.GIBSON;
			case 3: return Builder.MARTIN;
			case 4: return Builder.COLLINGS;
			case 5: return Builder.TAYLOR;
			default:
				System.out.println("Invalid builder selection.");
				return null;
		}
	}

	private static Type selectType(Scanner sc) {
		System.out.println("Select Type:");
		System.out.println("1. ACOUSTIC");
		System.out.println("2. ELECTRIC");

		int choice = sc.nextInt();
		switch (choice) {
			case 1: return Type.ACOUSTIC;
			case 2: return Type.ELECTRIC;
			default:
				System.out.println("Invalid type selection.");
				return null;
		}
	}

	private static Wood selectWood(Scanner sc, String woodType) {
		System.out.println("Select " + woodType + " Wood:");
		System.out.println("1. MAHOGANY");
		System.out.println("2. MAPLE");
		System.out.println("3. ALDER");
		System.out.println("4. ROSEWOOD");
		System.out.println("5. CEDAR");

		int choice = sc.nextInt();
		switch (choice) {
			case 1: return Wood.MAHOGANY;
			case 2: return Wood.MAPLE;
			case 3: return Wood.ALDER;
			case 4: return Wood.ROSEWOOD;
			case 5: return Wood.CEDAR;
			default:
				System.out.println("Invalid wood selection.");
				return null;
		}
	}

	private static void initializeInventory(Inventory inventory) {
		inventory.addGuitar("V001", 1500,
				new GuitarSpec(Builder.FENDER, "Stratocastor", Type.ELECTRIC, Wood.ALDER, Wood.ALDER));
		inventory.addGuitar("V002", 1200,
				new GuitarSpec(Builder.GIBSON, "Les Paul", Type.ELECTRIC, Wood.MAPLE, Wood.MAHOGANY));
		inventory.addGuitar("V003", 1300,
				new GuitarSpec(Builder.MARTIN, "D-28", Type.ACOUSTIC, Wood.ROSEWOOD, Wood.CEDAR));
		inventory.addGuitar("V004", 1000,
				new GuitarSpec(Builder.GIBSON, "SG Standard", Type.ELECTRIC, Wood.MAPLE, Wood.MAHOGANY));
		inventory.addGuitar("V005", 1100,
				new GuitarSpec(Builder.FENDER, "Telecaster", Type.ELECTRIC, Wood.ALDER, Wood.MAPLE));
	}
}
