/*
 * Select Model: 1. Stratocastor 2. Les Paul 3. D-28 4. SG Standard 5.
 * Telecaster
 */
package com.miniproject.guitar.solution2;

import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

public class FindGuitarTester {

	public static void main(String[] args) {
		Inventory inventory = new Inventory();
		initializeInventory(inventory);
		Scanner sc = new Scanner(System.in);

		try {
			while (true) {
				System.out.println("What would you like to do?");
				System.out.println("Search Guitar");
				System.out.println("Exit");

				String userChoice = sc.nextLine().trim().toLowerCase();

				if (userChoice.equals("exit")) {
					System.out.println("Thank you for using Guitar Finder!");
					break;
				} else if (!userChoice.equals("search guitar")) {
					System.out.println("Invalid option. Please type 'Search Guitar' or 'Exit'.");
					continue;
				}

				System.out.println("Enter the model you are looking for:");
				String model = sc.nextLine();

				Builder builder = selectBuilder(sc);
				Type type = selectType(sc);
				Wood backWood = selectWood(sc, "Back");
				Wood topWood = selectWood(sc, "Top");

				GuitarSpec userSpec = new GuitarSpec(builder, model, type, backWood, topWood);
				List<Guitar> matches = inventory.search(userSpec);

				if (matches.isEmpty()) {
					System.out.println("Sorry, we have nothing matching your preference.");
				} else {
					for (Guitar guitar : matches) {
						GuitarSpec spec = guitar.getSpec();
						System.out.println("You might like this " + spec.getBuilder() + " " + spec.getModel() + " "
								+ spec.getType() + " guitar:\n   " + spec.getBackWood() + " back and sides,\n   "
								+ spec.getTopWood() + " top.\nYou can have it for only $" + guitar.getPrice() + "!\n");
					}
				}
			}
		} catch (Exception e) {
			System.out.println("Something went wrong: " + e.getMessage());
		} finally {
			sc.close();
		}
	}

	private static Builder selectBuilder(Scanner sc) {
		while (true) {
			try {
				System.out.println("Select Builder:");
				System.out.println("FENDER");
				System.out.println("GIBSON");
				System.out.println("MARTIN");
				System.out.println("COLLINGS");
				System.out.println("TAYLOR");
				int choice = Integer.parseInt(sc.nextLine());
				switch (choice) {
					case 1: return Builder.FENDER;
					case 2: return Builder.GIBSON;
					case 3: return Builder.MARTIN;
					case 4: return Builder.COLLINGS;
					case 5: return Builder.TAYLOR;
					default:
						System.out.println("Invalid builder selection. Try again.");
				}
			} catch (NumberFormatException e) {
				System.out.println("Invalid input! Please enter numeric values for selection.");
			}
		}
	}

	private static Type selectType(Scanner sc) {
		while (true) {
			try {
				System.out.println("Select Type:");
				System.out.println("ACOUSTIC");
				System.out.println("ELECTRIC");
				int choice = Integer.parseInt(sc.nextLine());
				switch (choice) {
					case 1: return Type.ACOUSTIC;
					case 2: return Type.ELECTRIC;
					default:
						System.out.println("Invalid type selection. Try again.");
				}
			} catch (NumberFormatException e) {
				System.out.println("Invalid input! Please enter numeric values for selection.");
			}
		}
	}

	private static Wood selectWood(Scanner sc, String woodType) {
		while (true) {
			try {
				System.out.println("Select " + woodType + " Wood:");
				System.out.println("MAHOGANY");
				System.out.println("MAPLE");
				System.out.println("ALDER");
				System.out.println("ROSEWOOD");
				System.out.println("CEDAR");
				int choice = Integer.parseInt(sc.nextLine());
				switch (choice) {
					case 1: return Wood.MAHOGANY;
					case 2: return Wood.MAPLE;
					case 3: return Wood.ALDER;
					case 4: return Wood.ROSEWOOD;
					case 5: return Wood.CEDAR;
					default:
						System.out.println("Invalid wood selection. Try again.");
				}
			} catch (NumberFormatException e) {
				System.out.println("Invalid input! Please enter numeric values for selection.");
			}
		}
	}

	private static void initializeInventory(Inventory inventory) {
		inventory.addGuitar("V001", 1500,
				new GuitarSpec(Builder.FENDER, "Stratocastor", Type.ELECTRIC, Wood.ALDER, Wood.ALDER));
		inventory.addGuitar("V002", 1200,
				new GuitarSpec(Builder.GIBSON, "Les Paul", Type.ELECTRIC, Wood.MAPLE, Wood.MAHOGANY));
		inventory.addGuitar("V003", 1300,
				new GuitarSpec(Builder.MARTIN, "D-28", Type.ACOUSTIC, Wood.ROSEWOOD, Wood.CEDAR));
		inventory.addGuitar("V004", 1000,
				new GuitarSpec(Builder.GIBSON, "SG Standard", Type.ELECTRIC, Wood.MAPLE, Wood.MAHOGANY));
		inventory.addGuitar("V005", 1100,
				new GuitarSpec(Builder.FENDER, "Telecaster", Type.ELECTRIC, Wood.ALDER, Wood.MAPLE));
	}
}
