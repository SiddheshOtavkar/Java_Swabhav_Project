package com.facade.tic_tac_toe;

//Board.java
public class Board {
	private final Symbol[][] grid;
	private final int SIZE = 3;

	public Board() {
		grid = new Symbol[SIZE][SIZE];
	}

	public void displayBoard() {
		System.out.println("  0 1 2");
		for (int i = 0; i < SIZE; i++) {
			System.out.print(i + " ");
			for (int j = 0; j < SIZE; j++) {
				System.out.print((grid[i][j] != null ? grid[i][j] : "_") + " ");
			}
			System.out.println();
		}
	}

	public boolean isCellEmpty(int row, int col) {
		return grid[row][col] == null;
	}

//	Checks if the board is completely filled.
	public boolean isFull() {
		for (Symbol[] row : grid) {
			for (Symbol cell : row) {
				if (cell == null)
					return false;
			}
		}
		return true;
	}

	public void placeSymbol(int row, int col, Symbol symbol) {
		grid[row][col] = symbol;
	}

//	Checks if the current move wins the game.
	public boolean isWinningMove(int row, int col, Symbol symbol) {
		return (checkRow(row, symbol) || checkCol(col, symbol) || checkDiagonals(symbol));
	}

	private boolean checkRow(int row, Symbol symbol) {
		for (int col = 0; col < SIZE; col++) {
			if (grid[row][col] != symbol)
				return false;
		}
		return true;
	}

	private boolean checkCol(int col, Symbol symbol) {
		for (int row = 0; row < SIZE; row++) {
			if (grid[row][col] != symbol)
				return false;
		}
		return true;
	}

	private boolean checkDiagonals(Symbol symbol) {
		boolean diag1 = true, diag2 = true;
		for (int i = 0; i < SIZE; i++) {
			diag1 &= (grid[i][i] == symbol); // top-left to bottom-right
			diag2 &= (grid[i][SIZE - i - 1] == symbol);
		}
		return diag1 || diag2;
	}
}
